# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

jobs:
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=vikasudacityproject \
              --stack-name "vikas-udacity-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="green"  
      - run:
          name: Add back-end ip to ansible inventory, use memstash
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances \
            --filters 'Name=tag:Name,Values=backend-green' \
            --query "Reservations[*].Instances[*].PublicDnsName" \
            --output text)
            echo ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip_${CIRCLE_WORKFLOW_ID}
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f5:cc:de:2b:33:1d:f5:14:4e:bc:b1:fd:d2:35:58:47"]
      # - attach_workspace:
      #     at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
      - run:
          name: Configure server
          command: |
            INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip_${CIRCLE_WORKFLOW_ID})
            echo ${INSTANCE_IP}
            cd .circleci/ansible/
            ls
            echo ${INSTANCE_IP} >> ./inventory.txt
            cat ./inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i ./inventory.txt configure-server.yml
  build:
    docker:
    # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
              python3 -m venv venv
              . venv/bin/activate
              make install
              # Install hadolint
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

          # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
workflows:
  default:
    jobs:
      - build:
          context: VikasContext
